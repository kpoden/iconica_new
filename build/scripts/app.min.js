function bodyLock(e){var t=window.innerWidth-document.body.clientWidth+"px";!0===e?(document.body.classList.add("_lock"),document.body.style.paddingRight=t):!1===e?(document.body.classList.remove("_lock"),document.body.style.paddingRight=0):void 0===e?body.classList.contains("_lock")?(document.body.classList.remove("_lock"),document.body.style.paddingRight=0):(document.body.classList.add("_lock"),document.body.style.paddingRight=t):console.error("Неопределенный аргумент у функции bodyLock()")}class Modal{constructor(e=""){this.modal=document.querySelector(".modal"),this.template=e,this.container=document.querySelector(".modal__content-inner"),this.init()}listenOpenTriggers(){this.triggers=document.querySelectorAll("[data-modal]"),this.triggers.forEach(e=>{e.addEventListener("click",()=>{this.templateName=e.dataset.modal,this.openModal()})})}listenOpenTriggersModal(){this.triggers=this.modal.querySelectorAll("[data-modal]"),this.triggers.forEach(e=>{e.addEventListener("click",()=>{this.templateName=e.dataset.modal,this.openModal()})})}listenCloseTriggers(){this.close=document.querySelectorAll(".modal__close"),this.close.forEach(e=>{e.addEventListener("click",()=>{this.closeModal()})}),this.modal.addEventListener("click",e=>{(e=e.target).classList.contains("modal")&&this.closeModal()})}initTemplate(){document.querySelector("."+this.templateName)&&(this.template=document.querySelector("."+this.templateName),this.container.innerHTML=this.template.innerHTML)}initForms(){var e;this.modal.querySelector("form")&&(e=this.modal.querySelector("form").id,new Form(e))}openModal(){this.modal.classList.add("opened"),bodyLock(!0),this.initTemplate(),this.initAdditionals(),showPassword(),this.initForms(),this.listenCloseTriggers(),this.listenOpenTriggersModal()}closeModal(){this.modal.classList.remove("opened"),bodyLock(!1)}listenCardRadio(){this.cardRadios=this.modal.querySelectorAll(".modal__radio input"),this.cardRadioSmall=this.modal.querySelector('[data-cardsize="small"]'),this.cardRadioSmall.click(),this.cardRadios.forEach(e=>{this.countChars("small"),e.addEventListener("change",()=>{"big"==e.dataset.cardsize?this.countChars("big"):"small"==e.dataset.cardsize&&this.countChars("small")})})}countChars(e){if(this.textareaBig=this.modal.querySelector(".modal__textarea.textAreaBig"),this.textareaSmall=this.modal.querySelector(".modal__textarea.textAreaSmall"),this.textareaBigImg=this.modal.querySelector(".cardBig"),this.textareaSmallImg=this.modal.querySelector(".cardSmall"),this.counterElement=this.modal.querySelector(".modal__counter"),this.textareaBig.value="",this.textareaSmall.value="","big"==e){this.textareaBig.classList.remove("hidden"),this.textareaSmall.classList.add("hidden"),this.textareaBigImg.classList.remove("hidden"),this.textareaSmallImg.classList.add("hidden");let t=300;this.counterElement.textContent="0/"+t,this.textareaBig.addEventListener("input",()=>{let e=this.textareaBig.value.length;e>=t&&(this.textareaBig.value=this.textareaBig.value.slice(0,t),e=t),this.counterElement.textContent=e+"/"+t})}else if("small"==e){this.textareaBig.classList.add("hidden"),this.textareaSmall.classList.remove("hidden"),this.textareaBigImg.classList.add("hidden"),this.textareaSmallImg.classList.remove("hidden");this.counterElement.textContent="0/80",this.textareaSmall.addEventListener("input",()=>{let e=this.textareaSmall.value.length;80<=e&&(this.textareaSmall.value=this.textareaSmall.value.slice(0,80),e=80),this.counterElement.textContent=e+"/80"})}}initSlick(){$(".modal__content .item__add-items").slick({slidesToShow:4,dots:!0,arrows:!1,infinite:!1,draggable:!0,swipe:!0,swipeToSlide:!0,responsive:[{breakpoint:1500,settings:{slidesToShow:3}},{breakpoint:1130,settings:{slidesToShow:2}},{breakpoint:760,settings:{slidesToShow:1.1}}]}),this.modal.querySelector(".item__slider-arrow.arr-left").addEventListener("click",()=>{$(".modal__content .item__add-items").slick("slickPrev")}),this.modal.querySelector(".item__slider-arrow.arr-right").addEventListener("click",()=>{$(".modal__content .item__add-items").slick("slickNext")})}addedItem(){this.addedImg=this.modal.querySelector(".addedItemImg"),0<document.querySelectorAll(".item__slider-main-slide img").length&&(this.mainItemImg=document.querySelectorAll(".item__slider-main-slide img")[0].src,this.addedImg.src=this.mainItemImg)}initAdditionals(){this.modal.querySelector(".modal__textarea")&&this.listenCardRadio(),this.modal.querySelector(".item__add-items")&&this.initSlick(),this.modal.querySelector(".addedItemImg")&&this.addedItem()}init(){this.initAdditionals(),this.listenOpenTriggers(),this.listenCloseTriggers()}}function basketCardTextareas(){const r=document.querySelector(".basket__add .textAreaSmall"),a=document.querySelector(".basket__add .textAreaBig");var e=document.querySelectorAll(".basket__add .basket__add-radio[data-radio]");document.querySelector(".basket__add .basket__add-radio [data-fert]").checked=!1;const s=document.querySelector(".basket__add .basket__add-counter"),t=document.querySelector(".basket__add-textAreas");function i(){s.textContent="0/80",r.addEventListener("input",()=>{let e=r.value.length;80<=e&&(r.value=r.value.slice(0,80),e=80),s.textContent=e+"/80"})}r.value="",a.value="",i(),e.forEach(e=>{e.querySelector('input[type="radio"]').checked=!1,e.addEventListener("click",()=>{if(r.value="",a.value="",t.classList.remove("hidden"),"small"==e.dataset.radio)a.classList.add("hidden"),r.classList.remove("hidden"),i();else if("big"==e.dataset.radio){a.classList.remove("hidden"),r.classList.add("hidden");{let t=300;s.textContent="0/"+t,a.addEventListener("input",()=>{let e=a.value.length;e>=t&&(r.value=a.value.slice(0,t),e=t),s.textContent=e+"/"+t});return}}})})}document.querySelector(".basket__add")&&basketCardTextareas();class MobMenu{constructor(){this.burger=document.querySelector(".burger"),this.menu=document.querySelector(".mob-menu"),this.overlay=document.querySelector(".overlay"),this.menuOpened=!1,this.init()}openMenu(){this.menu.classList.add("mob-active"),this.overlay.classList.add("overlay-active"),this.burger.classList.add("active-burger"),document.body.classList.add("_locked"),this.menuOpened=!0}closeMenu(){this.menu.classList.remove("mob-active"),this.overlay.classList.remove("overlay-active"),this.burger.classList.remove("active-burger"),document.body.classList.remove("_locked"),this.menuOpened=!1}triggerOpen(){this.burger.addEventListener("click",()=>{this.menuOpened?this.closeMenu():this.openMenu()}),this.overlay.addEventListener("click",()=>{this.closeMenu()})}init(){this.triggerOpen()}}function cropText(){document.querySelectorAll("[data-crop]").forEach(e=>{var t=e.textContent;30<t.length&&(t=t.substring(0,30).trim()+"...",e.textContent=t)})}function showPassword(){var e=document.querySelectorAll(".eyes");0<e.length&&e.forEach(t=>{t.addEventListener("click",()=>{var e=t.parentNode.querySelector(".modal__input");t.classList.contains("active")?(e.setAttribute("type","password"),t.classList.remove("active")):(e.setAttribute("type","text"),t.classList.add("active"))})})}cropText();class Form{constructor(e){this.form=document.getElementById(e),this.init()}deleteErrors(){this.form.querySelectorAll("._error-txt").forEach(e=>{e.parentNode.removeChild(e)}),this.form.querySelectorAll("input[type=text], input[type=tel], input[type=password]").forEach(e=>{e.classList.remove("_error-input")}),this.form.querySelector(".error-wrap")&&this.form.querySelectorAll(".error-wrap").forEach(e=>e.textContent=""),"lk-form"==this.form.id&&(this.form.querySelector(".oldpass-error-wrap").textContent="")}createErrAuth(){var e;"auth-form"==this.form.id&&(this.form.querySelectorAll(".modal__input").forEach(e=>{e.classList.add("_error-input")}),(e=document.createElement("span")).textContent="Не правильный логин или пароль",e.classList.add("_error-txt"),this.form.querySelector(".error-wrap").appendChild(e))}createError(e){this.form.id;e.forEach(e=>{var t=e.closest(".input-wrap"),r=document.createElement("span");r.textContent="Обязательное поле",r.classList.add("_error-txt"),e.classList.add("_error-input"),t.appendChild(r)})}validateForm(){var e=this.form.querySelectorAll("[data-required]");let t=[];return this.deleteErrors(),e.forEach(e=>{""===e.value.trim()&&t.push(e)}),!(0<t.length&&(this.createError(t),1))}validatePasswords(){var t=this.form.querySelectorAll("[data-newpass]"),r=this.form.querySelector(".pass-error-wrap"),e=t[0].value==t[1].value,a=t[0].value,s=/^(?=.*[a-zA-Z])(?=.*[0-9])/.test(a),i=/^[a-zA-Z0-9]+$/.test(a),a=a.length,a=8<=a&&a<=25;if(t.forEach(e=>e.classList.remove("_error-input")),e){if(i&&a&&s)return!0;{let e=document.createElement("span");e.textContent="Пароль должен быть 8-25 символов",e.classList.add("_error-txt"),r.appendChild(e),(e=document.createElement("span")).textContent="содержать латинские буквы и цифры",e.classList.add("_error-txt"),r.appendChild(e),t.forEach(e=>e.classList.add("_error-input"))}}else(e=document.createElement("span")).textContent="Пароли не совпадают",e.classList.add("_error-txt"),t.forEach(e=>e.classList.add("_error-input")),r.appendChild(e);return!1}oldPassWrong(){var e,t,r;"lk-form"==this.form.id&&(t=(e=this.form.querySelector(".oldpass-error-wrap")).parentNode.querySelector(".profile__input"),(r=document.createElement("span")).textContent="Пароль не верный",r.classList.add("_error-txt"),e.appendChild(r),t.classList.add("_error-input"))}policyChecked(){var e=this.form.querySelector(".profile__checkbox-input"),t=this.form.querySelector(".policy-err");return!!e.checked||((e=document.createElement("span")).textContent="Ознакомьтесь с политикой конфиденциальности",e.classList.add("_error-txt"),t.appendChild(e),!1)}validateEmail(){var e,t=this.form.querySelector("input[name=email]"),r=t.value;return!!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(r)||(console.log("email not val"),r=t.closest(".input-wrap"),(e=document.createElement("span")).textContent="Введите верный Email",e.classList.add("_error-txt"),t.classList.add("_error-input"),r.appendChild(e),!1)}createSuccsessMsg(){"lk-form"==this.form.id?(console.log(this.form.id),this.form.querySelector(".profile-succsess-msg").textContent="Изменения успешно внесены"):"reg-form"==this.form.id&&document.querySelector(".regThanksLink").click(),"callback-form"==this.form.id&&document.querySelector(".callbackThanksLink").click()}listenSubmit(){this.form.addEventListener("submit",e=>{if((e.preventDefault(),this.validateForm())&&((!this.form.querySelector("input[name=email]")||""==this.form.querySelector("input[name=email]").value||this.validateEmail())&&("reg-form"!=this.form.id&&"lk-form"!=this.form.id||this.validatePasswords())&&("reg-form"==this.form.id&&(grecaptcha.getResponse().length?(console.log(2),$("#recaptchaError").text("")):(console.log(1),$("#recaptchaError").text("* Вы не прошли проверку капчей"))),"lk-form"!=this.form.id||this.policyChecked()))){const t=new XMLHttpRequest;e=new FormData(this.form);console.log(e),console.log("send form data"),"order-form"==this.form.id?t.open("POST","local/ajax/order.php"):"auth-form"==this.form.id?t.open("POST","/local/ajax/auth.php"):"reg-form"==this.form.id?t.open("POST","/local/ajax/reg.php"):"callback-form"==this.form.id?t.open("POST","/local/ajax/callback.php"):"lk-form"==this.form.id?t.open("POST","/local/ajax/lk.php"):"restore-form"==this.form.id?t.open("POST","/local/ajax/restore.php"):t.open("POST","/local/ajax/test.php"),t.onload=()=>{200===t.status?console.log(t.responseText):"noauth"==t.responseText?(console.error("Ошибка: ",t.status),this.createErrAuth()):"oldpasswrong"==t.responseText?this.oldPassWrong():(this.createSuccsessMsg(),console.log(t.responseText))},t.send(e),this.form.classList.add("sent"),this.form.reset()}})}maskInit(){var e,t;this.form.querySelector("input[name=phone]")&&(e=this.form.querySelector("input[name=phone]"),IMask(e,{mask:"+{7}(000) 000-00-00"})),this.form.querySelector("input[name=date]")&&(e=this.form.querySelector("input[name=date]"),t={mask:Date,min:new Date(1990,0,1),max:new Date(2020,0,1),lazy:!1},IMask(e,t)),this.form.querySelector("input[name=time]")&&(e=this.form.querySelector("input[name=time]"),t={overwrite:!0,autofix:!0,mask:"HH:MM",blocks:{HH:{mask:IMask.MaskedRange,placeholderChar:"HH",from:0,to:23,maxLength:2},MM:{mask:IMask.MaskedRange,placeholderChar:"MM",from:0,to:59,maxLength:2}}},IMask(e,t))}init(){this.listenSubmit(),this.maskInit()}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
